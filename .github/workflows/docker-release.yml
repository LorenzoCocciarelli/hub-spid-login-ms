name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  DOCKER_REGISTRY: ghcr.io
  OWNER: pagopa

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           docker build . --file Dockerfile
  #         fi

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          echo "current folder: $(pwd)"
          FROM_SOURCE=$(cat .node-version || cat .nvmrc)
          ls .node-version && echo ".node-version found, value: '$(cat .node-version)'" || echo ".node-version not found" 
          ls .nvmrc && echo ".nvmrc found, value: '$(cat .nvmrc)'" || echo ".nvmrc not found"
          echo "set FROM_SOURCE='$FROM_SOURCE'"
          GITHUB_REPO=$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]')
          docker build . --file DockerfileRegistry --tag $GITHUB_REPO \
            --build-arg NODE_VERSION=$FROM_SOURCE \
            --build-arg OWNER=$OWNER \
            --build-arg REPO=$GITHUB_REPO

      - name: Log into registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $DOCKER_REGISTRY -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          GITHUB_REPO=$(echo "${{ github.repository }}" | tr '[A-Z]' '[a-z]')
          IMAGE_ID=$DOCKER_REGISTRY/$GITHUB_REPO
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $GITHUB_REPO $GITHUB_REPO:$VERSION
          docker push $IMAGE_ID:$VERSION
