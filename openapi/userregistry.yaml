info:
  title: User Registry Management
  description: User Registry Management
  version: "{{version}}"
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: http://swagger.io/terms/
  x-api-id: an x-api-id
  x-summary: an x-summary
tags:
  - name: user
    description: Users
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: http://swagger.io
security:
  - SubscriptionKey: []
paths:
  /users:
    post:
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      responses:
        "201":
          description: User created
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid input
          schema:
            $ref: "#/definitions/Problem"
        "409":
          description: User already exists
          schema:
            $ref: "#/definitions/Problem"
      parameters:
        - description: User object that needs to be created
          required: true
          name: body
          in: body
          schema:
            $ref: "#/definitions/UserSeed"
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
  /users/id/{id}:
    parameters:
      - name: id
        in: path
        description: The internal ID of the User
        required: true
        format: uuid
        type: string
    get:
      tags:
        - user
      summary: Retrieve the user for the given internal id
      description: Return the user
      operationId: getUserById
      responses:
        "200":
          description: User
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/Problem"
      parameters: []
      produces:
        - application/json
        - application/problem+json
  /users/external-id:
    post:
      tags:
        - user
      summary: Retrieve the user for the given external ID
      description: Return the user ID
      operationId: getUserByExternalId
      responses:
        "200":
          description: User
          schema:
            $ref: "#/definitions/User"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/Problem"
      parameters:
        - description: Person External ID to retrieve the User
          required: true
          name: body
          in: body
          schema:
            $ref: "#/definitions/EmbeddedExternalId"
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
  /users/update:
    post:
      tags:
        - user
      summary: Update an existing user
      operationId: updateUser
      responses:
        "200":
          description: User updated
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid input
          schema:
            $ref: "#/definitions/Problem"
      parameters:
        - description: User object that needs to be updated
          required: true
          name: body
          in: body
          schema:
            $ref: "#/definitions/UserSeed"
      consumes:
        - application/json
      produces:
        - application/json
        - application/problem+json
  /status:
    get:
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Problem"
      parameters: []
      produces:
        - application/problem+json
swagger: "2.0"
basePath: /pdnd-interop-uservice-user-registry-management/%7B%7Bversion%7D%7D
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
      externalId:
        type: string
      name:
        type: string
      surname:
        type: string
      certification:
        $ref: "#/definitions/Certification"
      extras:
        $ref: "#/definitions/UserExtras"
    required:
      - id
      - externalId
      - certification
      - extras
  UserSeed:
    type: object
    properties:
      externalId:
        type: string
      name:
        type: string
      surname:
        type: string
      certification:
        $ref: "#/definitions/Certification"
      extras:
        $ref: "#/definitions/UserExtras"
    required:
      - externalId
      - certification
      - extras
  Certification:
    type: string
    description: Certified source of information
    enum:
      - NONE
      - SPID
  EmbeddedExternalId:
    type: object
    properties:
      externalId:
        type: string
        description: The external ID (e.g. tax code) of the User
    required:
      - externalId
  UserExtras:
    type: object
    properties:
      email:
        type: string
      birthDate:
        type: string
        format: date
  Problem:
    type: object
    properties:
      type:
        description: URI reference of type definition
        type: string
      status:
        description: The HTTP status code generated by the origin server for this occurrence of the problem.
        example: 503
        exclusiveMaximum: true
        format: int32
        maximum: 600
        minimum: 100
        type: integer
      title:
        description: A short, summary of the problem type. Written in english and readable
        example: Service Unavailable
        type: string
      detail:
        description: A human readable explanation of the problem.
        example: Request took too long to complete.
        maxLength: 4096
        pattern: ^.{0,1024}$
        type: string
      errors:
        type: array
        minItems: 1
        items:
          $ref: "#/definitions/ProblemError"
    additionalProperties: false
    required:
      - status
      - title
  ProblemError:
    type: object
    properties:
      code:
        description: Internal code of the error
        example: 123-4567
        minLength: 8
        maxLength: 8
        pattern: ^[0-9]{3}-[0-9]{4}$
        type: string
      detail:
        description: A human readable explanation specific to this occurrence of the problem.
        example: Parameter not valid
        maxLength: 4096
        pattern: ^.{0,1024}$
        type: string
    required:
      - code
      - detail
securityDefinitions:
  SubscriptionKey:
    type: apiKey
    in: header
    name: Ocp-Apim-Subscription-Key
x-components: {}
