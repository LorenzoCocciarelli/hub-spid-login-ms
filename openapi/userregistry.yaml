basePath: /pdnd-interop-uservice-user-registry-management/%7B%7Bversion%7D%7D
definitions:
  CertificationEnum:
    description: Certified source of information
    enum:
      - NONE
      - SPID
    type: string
  User:
    properties:
      certification:
        $ref: '#/definitions/CertificationEnum'
      email:
        type: string
      externalId:
        type: string
        desription: User fiscal code or any other user identifier
      id:
        format: uuid
        type: string
      name:
        type: string
      surname:
        type: string
    required:
      - externalId
      - certification
    type: object
  Problem:
    properties:
      detail:
        description: >-
          A human readable explanation specific to this occurrence of the
          problem.
        example: Request took too long to complete.
        type: string
      status:
        description: >-
          The HTTP status code generated by the origin server for this
          occurrence of the problem.
        example: 503
        exclusiveMaximum: true
        format: int32
        maximum: 600
        minimum: 100
        type: integer
      title:
        description: 'A short, summary of the problem type. Written in english and readable'
        example: Service Unavailable
        type: string
    required:
      - status
      - title
    type: object
  UserId:
    properties:
      id:
        format: uuid
        type: string
    required:
      - id
    type: object
  UserSeed:
    properties:
      certification:
        $ref: '#/definitions/CertificationEnum'
      email:
        type: string
      externalId:
        type: string
      name:
        type: string
      surname:
        type: string
    required:
      - externalId
      - certification
    type: object
info:
  contact:
    email: support@example.com
    name: API Support
    url: 'http://www.example.com/support'
  description: User Registry Management
  termsOfService: 'http://swagger.io/terms/'
  title: User Registry Management
  version: '{{version}}'
  x-api-id: an x-api-id
  x-summary: an x-summary
paths:
  /status:
    get:
      description: Return ok
      operationId: getStatus
      parameters: []
      produces:
        - application/problem+json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Problem'
      summary: Health status endpoint
      tags:
        - health
  /users:
    post:
      consumes:
        - application/json
      operationId: createUser
      parameters:
        - description: User object that needs to be created
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserSeed'
      produces:
        - application/json
        - application/problem+json
      responses:
        '201':
          description: User created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/Problem'
      summary: Create a new user
      tags:
        - user
  '/users/external-id/{externalId}':
    get:
      description: Return the user ID
      operationId: getUserIdByExternalId
      parameters: []
      produces:
        - application/json
        - application/problem+json
      responses:
        '200':
          description: UserId
          schema:
            $ref: '#/definitions/UserId'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Problem'
      summary: Retrieve the user ID for the given external ID
      tags:
        - user
    parameters:
      - description: The external ID (e.g. tax code) of the User
        in: path
        name: externalId
        required: true
        type: string
    post:
      consumes:
        - application/json
      operationId: updateUser
      parameters:
        - description: User object that needs to be updated
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserSeed'
      produces:
        - application/json
        - application/problem+json
      responses:
        '200':
          description: User updated
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/Problem'
      summary: Update an existing user
      tags:
        - user
  '/users/id/{id}':
    get:
      description: Return the user
      operationId: getUserById
      parameters: []
      produces:
        - application/json
        - application/problem+json
      responses:
        '200':
          description: User
          schema:
            $ref: '#/definitions/User'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/Problem'
      summary: Retrieve the user for the given internal id
      tags:
        - user
    parameters:
      - description: The internal ID of the User
        format: uuid
        in: path
        name: id
        required: true
        type: string
swagger: '2.0'
tags:
  - description: Users
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
    name: user
  - description: Verify service status
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
    name: health
x-components: {}

